call plug#begin('~/.vim/plugged')

Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/seoul256.vim'

" Group dependencies, vim-snippets depends on ultisnips
" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sleuth'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-bundler'
Plug 'thoughtbot/vim-rspec'
Plug 'isRuslan/vim-es6'
Plug 'mattn/emmet-vim'
Plug 'lambdatoast/elm.vim'
Plug 'w0rp/ale'
Plug 'tmhedberg/SimpylFold'
Plug 'walm/jshint.vim'
Plug 'Shutnik/jshint2.vim'
Plug 'digitaltoad/vim-pug'
Plug 'wavded/vim-stylus'
Plug 'rhysd/vim-crystal'
Plug 'kballard/vim-swift'
Plug 'ngmy/vim-rubocop'
Plug 'stefanoverna/vim-i18n'
Plug 'kchmck/vim-coffee-script'
Plug 'posva/vim-vue'
Plug 'fatih/vim-go'
Plug 'brookhong/ag.vim'
Plug 'luochen1990/rainbow'
Plug 'editorconfig/editorconfig-vim'
Plug 'dyng/ctrlsf.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'chrisbra/Colorizer'
Plug 'pangloss/vim-javascript'
Plug 'jparise/vim-graphql'
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install() }}
Plug 'flowtype/vim-flow', { 'autoload': { 'filetypes': 'javascript' } }

" For using deoplete
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'wokalski/autocomplete-flow'
  Plug 'Shougo/neosnippet'
  Plug 'Shougo/neosnippet-snippets'
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'wokalski/autocomplete-flow'
  Plug 'Shougo/neosnippet'
  Plug 'Shougo/neosnippet-snippets'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1

" neosnippet
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

" a Vim extension that emulates iA Writer environment when editing Markdown, reStructuredText or text files
Plug 'amix/vim-zenroom2'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Add plugins to &runtimepath
call plug#end()

let mapleader      = ' '
let maplocalleader = ' '

set hidden
set cmdheight=2
set updatetime=300
set signcolumn=yes
set backspace=indent,eol,start
set autoindent
set smartindent
set encoding=utf-8
set hlsearch        " highlight search matches
set incsearch       " search while characters are entered
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set ai              " Auto indent
set si              " Smart indent
set showmatch       " show matching braces
set ruler
filetype indent on  " enable filetype specific indentation

" Enable syntax highlighting
syntax on
syntax enable

" Color scheme
set background=dark
colors seoul256
let g:seoul256_background = 236

" Keep the cursor on the same column
set nostartofline

" Splits
nnoremap <Leader><Bar> :vsplit<cr>
nnoremap <Leader>_ :split<cr>

" Splits navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Numbers
set number
set relativenumber

" Tabs
nnoremap <Leader>t :tabnew<cr>
nnoremap <Tab>   :tabnext<cr>
nnoremap <S-Tab> :tabprevious<cr>

" Write
nnoremap <Leader>w :w<cr>
nnoremap <C-w> <Esc>:w<Esc><cr>k
inoremap <C-w> <Esc>:w<Esc><cr>k

" Automatically update a file if it is changed externally
set autoread

" Toggle the highlighting for the current search
nnoremap <Leader>h :set hlsearch! hlsearch?<cr>

" Quit
nnoremap <Leader>q <Esc>:q<Esc><cr>k

" 고요
nnoremap <Leader>g :Goyo<cr>

"

" Limelight
nmap <Leader>l <Plug>(Limelight)
" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
" 고요 integration
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!
"

" NERDTree
nnoremap \ :NERDTreeToggle<cr>

" Move lines
nnoremap <S-u> :m-2<cr>
nnoremap <S-j> :m+<cr>

" Trim white spaces at the end of lines
autocmd BufWritePre * %s/\s\+$//e

" FZF
nnoremap <Leader>f :FZF<cr>

" Esc
inoremap <c-e> <Esc>l

" Mouse support
set mouse=a

" Show command
set showcmd

" Backup and swp
set backupdir=~/.vim/backup
set directory=~/.vim/swap

" Reads local project .vimrc file
set exrc
set secure  " disables shell execution and write operations

" Folding
set foldmethod=indent
set foldlevel=99

" Enable folding
nnoremap <leader> za

" SimpylFold
let g:SimpylFold_docstring_preview = 1

" The Silver Searcher
" as seen in: https://robots.thoughtbot.com/faster-grepping-in-vim
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l -g ""'
endif

" bind K to grep word under cursor
nnoremap <leader>s :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
" command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap <leader>\ :Ag<SPACE>

" stylus syntax
autocmd BufNewFile,BufRead *.styl set filetype=stylus

" vim-i18n
vmap <Leader>T :call I18nTranslateString()<CR>
vmap <Leader>DT :call I18nDisplayTranslation()<CR>

" line length
set textwidth=80
set colorcolumn=+1

" rainbow
let g:rainbow_active = 1

" rainbow toggle
nnoremap <C-u> :RainbowToggle<cr>

" python
if has('python3')
  set pyx=3
else
  set pyx=2
endif

" Ctrlsf
nmap     ;f <Plug>CtrlSFPrompt
vmap     ;f <Plug>CtrlSFVwordPath
vmap     ;F <Plug>CtrlSFVwordExec
nmap     ;n <Plug>CtrlSFCwordPath
nmap     ;p <Plug>CtrlSFPwordPath
nnoremap ;o :CtrlSFOpen<CR>
nnoremap ;t :CtrlSFToggle<CR>
inoremap ;t <Esc>:CtrlSFToggle<CR>

" multiple cursors
let g:multi_cursor_use_default_mapping=0

" Default mapping
let g:multi_cursor_start_word_key      = '<C-n>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-n>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

" Colorizer
nnoremap <Leader>c :ColorToggle<cr>
